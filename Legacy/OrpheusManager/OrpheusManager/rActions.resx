<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>1 Initiative. Gain +1 to your next attack, provided your attack immediately follows your
aim action. You may take this action up to 3 times before attacking. Moving target
penalties are reduced by 1 for each Initiative spent aiming. If you take damage while
Aiming, you must check Stability or Discipline against damage taken to avoid losing the
benefits of the Aim action.

1-4 Initiative (Based on complexity; 1 = Loading 1 shotgun shell. 4 = reloading
an RPG, GM Discretion)

2 Initiative.

1 Initiative. You may instead draw a weapon at 0 Initiative cost if you attack
immediately at -1 to hit.

8 – (Speed Check w/ Athletics Skill) Initiative, minimum 2. Go anywhere in your Area,
or take this Action 2 times to reach another Area. This Initiative is paid 1-at-a-time,
allowing you to cancel your movement, and others to react to it. If you don't complete
the movement, reasonable GM discretion as to where in your Area you end up.

8 – (Speed Check) Initiative, minimum 2. Combines a movement and attack, but the
attack is at -1 to hit. Initiative is spent 1-at-a-time, as with Move actions, but the attack
only occurs if the movement is completed. If you don't complete the movement,
reasonable GM discretion as to where in your Area you end up.

2 Initiative. Move a very short distance (through a door you were touching, one long
stride, etc.) This Initiative is not spent 1-at-a-time and does not prompt opportunity.
However, this movement never functionally removes you from melee with an enemy.

 1 Initiative. Open a door, take something from your pocket, or some other very minor
action per GM discretion. Minor actions may be taken during movement without
spending Initiative.

3 Initiative unless specified otherwise.

3 Initiative if successful (See Tactics section).

1 Initiative. Try to speak to someone in combat. Short, sentence-or-so (GM discretion)
utterances cost 1 Initiative, and continuing to speak takes more.</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>4 Initiative. Successes on this check can be spent in the following ways:

2 Successes: *Give an ally who has taken damage in excess of one of their damage
                         tracks +1 to Up Checks and Death Checks this Scene.
                       *Stabilize Bleeding.

4 Successes: *Reduce ally's temporary wound penalty of one type by 1.
                      *Stabilize Serious Bleeding.

6 Successes: *Wake an unconscious ally.
                      *Give an ally who has taken damage in excess of one of their damage
                        tracks +2 to Up Checks and Death Checks this Scene.
                      *Stabilize Arterial Bleeding.

10 Successes: *Reduce ally's temporary wound penalty of one type by 2.
                        *Give an ally who has taken damage in excess of one of their damage
                          tracks +3 to Up Checks and Death Checks this Scene.

NOTE: If you fail to meet the DV for a First Aid check in combat, you may continue
treatment by spending a number of Initiative equal to double your degrees of failure. At
the end of this period, the first aid is successful. First Aid Initiative is spent 1-at-a-time
as with Movement. First aid may be used on yourself, but with a -2 penalty.

1 Initiative, may be spent out of turn. +1 to avoid an attack. (Counts as tactics for
modifier type.)

2 Initiative, may be spent out of turn. Roll an Attack check with a melee weapon (or
Dodge with Dexterity) to block or parry an incoming melee attack. If successful,
attacker loses 2 Initiative. If the blocked attack was unarmed, attacker takes your attack's
damage instead.

3 Initiative, may be spent out of turn as an enemy closes to melee with you. Check
Athletics with Speed against enemy's Athletics with Speed. If successful, they still reach
your area, but are not in melee with you and must move again to close with you. 

Spend Initiative on a 2-for-1 basis to gain Interrupt Initiative (II). You may spend II to
take actions out-of-turn, interrupting other entities' turns as desired and as is narratively
appropriate. If multiple characters have II, their interrupt actions are resolved in order of
their base Initiative Attribute, and with further ties resolved by random die roll.</value>
  </data>
</root>